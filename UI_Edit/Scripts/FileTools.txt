----------------------------------------------------------------------------------------
-- ScanFolder
-- Scans a folder, listing the files inside
-- n: Name of folder
-- Returns: A table with the files listed, stored in numerical order from 1 to n; also,
--			if "." and/or ".." are valid, it sets those entries to true
----------------------------------------------------------------------------------------
function ScanFolder (n)
	--------------------------------------------
	-- Open the folder, and create a new table.
	--------------------------------------------
	local d = dirent.open(n);
	if not d then
		return nil;
	end
	local f = { n = 0 };
	------------------------------------------------------------------------------------
	-- Iterate through the entries in the folder. If they are "." or ".." entries, flag
	-- these as available. Otherwise, add the name(with partial path) to the table.
	------------------------------------------------------------------------------------
	while true do
		local e = dirent.read(d);
		if not e then break end;
		if e.d_name == "." or e.d_name == ".." then 
			f[e.d_name] = true;
		else
			table.insert(f, e.d_name);
		end
	end
	------------------------------------------
	-- Close the folder and return the table.
	------------------------------------------
	dirent.close(d);
	return f;
end

----------------------------------------------
-- IsDirectory
-- Checks whether an entry is a directory
-- n: Name of directory
-- Returns: True if this entry is a directory
----------------------------------------------
function IsDirectory (n)
	--------------------------------------------------------------------------------------
	-- If opening yields nil, this is not a directory. Otherwise, close the directory and
	-- indicate success.
	--------------------------------------------------------------------------------------
	local d = dirent.open(n);
	if d then
		dirent.close(d);
	end
	return d ~= nil;
end

-------------------------------------
-- SaveComponentList
-- Used to save a list of components
-- f: File handle
-- t: Component type
-- sc: Component save routine
-------------------------------------
function SaveComponentList (f, t, sc)
	f:write(string.format("<n%s>%i</n%s>\n", t, Listbox.GetItemCount(Main.Comp[t]), t));
	for i, id, c in LB_Range(Main.Comp[t]) do
		f:write(string.format("<%s>\n", t));
		f:write(string.format("\t<ID>\"%s\"</ID>\n", id));
		sc(f, c);
		f:write(string.format("</%s>\n", t));
	end	
end

----------------------------
-- SaveMethods
-- Saves a widget's methods
-- f: File handle
-- w: Widget properties
-- uf: Use fit method
----------------------------
function SaveMethods (f, wp, uf)
	local mt = { "D", "HT", "PE", "F" };
	if not uf then table.remove(mt) end;
	f:write("\t<m>\n");
	for i, m in ipairs(mt) do
		f:write(string.format("\t\t<%s>\"%s\"</%s>\n", m, wp.m[m], m));
	end
	f:write("\t</m>\n");
end

---------------------------
-- SaveInts
-- Saves a list of ints
-- f: File handle
-- c: Component properties
-- il: Ints to save
---------------------------
function SaveInts (f, c, il)
	for i, n in ipairs(il) do
		f:write(string.format("\t<%s>%i</%s>\n", n, c[n], n));
	end
end

---------------------------
-- SaveFloats
-- Saves a list of floats
-- f: File handle
-- c: Component properties
-- fl: Floats to save
---------------------------
function SaveFloats (f, c, fl)
	for i, n in ipairs(fl) do
		f:write(string.format("\t<%s>%f</%s>\n", n, c[n], n));
	end
end

----------------------------
-- SaveBooleans
-- Saves a list of booleans
-- f: File handle
-- c: Component properties
-- bl: Booleans to save
----------------------------
function SaveBooleans (f, c, bl)
	for i, b in ipairs(bl) do
		if c[b] then
			f:write(string.format("\t<%s>%s</%s>\n", b, "true", b));
		else
			f:write(string.format("\t<%s>%s</%s>\n", b, "false", b));
		end
	end
end

----------------------------
-- SavePictures
-- Saves a list of pictures
-- f: File handle
-- w: Widget properties
-- pl: Pictures to save
----------------------------
function SavePictures (f, w, pl)
	for i, p in ipairs(pl) do
		if w[p].f then
			f:write(string.format("\t<%s>\n", p));
			f:write(string.format("\t\t<f>\"%s\"</f>\n", w[p].f));
			f:write(string.format("\t\t<x1>%f</x1>\n", w[p].x1));
			f:write(string.format("\t\t<y1>%f</y1>\n", w[p].y1));
			f:write(string.format("\t\t<x2>%f</x2>\n", w[p].x2));
			f:write(string.format("\t\t<y2>%f</y2>\n", w[p].y2));
			f:write(string.format("\t</%s>\n", p));
		end
	end
end

----------------------------
-- SaveStrings
-- Saves a component string
-- f: File handle
-- c: Component properties
-- sl: Strings to save
----------------------------
function SaveStrings (f, c, sl)
	for i, s in ipairs(sl) do
		if c[s] then
			f:write(string.format("\t<%s>\"%s\"</%s>\n", s, c[s], s));
		end
	end
end

-------------------------------------
-- SaveWidget
-- Saves the common part of a widget
-- f: File handle
-- w: Widget properties
-------------------------------------
function SaveWidget (f, w)
	SaveStrings(f, w, { "tag" });
	SavePictures(f, w, { "pD", "pO", "pG", "pE" });
end

-----------------------------------------------
-- LoadPictures
-- Loads a widget's pictures, given a data set
-- wp: Widget properties
-- wd: Widget data
-- ps: Picture set to load from
-----------------------------------------------
function LoadPictures (wp, wd, ps)
	for k, p in pairs(ps) do
		if wd[p] then
			wp[p], n = wd[p], string.format("Assets/Textures/%s", wd[p].f);
			wp[p].p = Render.LoadPicture(n, wd[p].x1, wd[p].y1, wd[p].x2, wd[p].y2);
		end
	end
end

-----------------------------------------------
-- GetNextLine
-- Reads a file until it gets a line with text
-- f: File handle
-- ld: Loading data
-----------------------------------------------
function GetNextLine (f, ld)
	------------------------------------------
	-- Iterate until we get a non-blank line.
	------------------------------------------
	while true do
		-------------------------------------------------------------------------------
		-- Grab a line. If we hit the end of the file, invalidate the line counter and
		-- return an empty string.
		-------------------------------------------------------------------------------
		local s = f:read("*l");
		if not s then 
			ld.l = nil;
			return "";
		end
		-----------------------------------------------------------
		-- Increment the line counter. Note that this starts at 0.
		-----------------------------------------------------------
		ld.l = ld.l + 1;
		-------------------------------------------------------------------------------
		-- Strip the spaces from before, after, and within any angle brackets found in 
		-- the line, ignoring those nested within quotes. If the result is non-empty,
		-- return the string.
		-------------------------------------------------------------------------------
		s = string.gsub(s, "%s*<%s*(%w+)%s*>%s*", "<%1>");
		s = string.gsub(s, "%s*</%s*(%w+)%s*>%s*", "</%1>");
		if s ~= "" then return s end;
	end
end

----------------------------
-- ProcessOpenTag
-- Processes an opening tag
-- ot: Open tag
-- ld: Loading data
----------------------------
function ProcessOpenTag (ot, ld)
	-----------------------------------------------------------------------------------
	-- Get the top of the section stack, and the type, if any, referred to by the tag.
	-----------------------------------------------------------------------------------
	local st, ty = ld.s[ld.s.n];
	--------------------------------------------------------------------
	-- If we are in a list, make sure we are using the appropriate tag.
	--------------------------------------------------------------------
	if st.n then
		ty = st.t;
		if ty ~= ot then
			ld.error = string.format("Expecting %s tag on line %i.", ty, ld.l);
		end
	---------------------------------------------------------------------
	-- Otherwise, make sure we are getting an valid, not-yet-loaded tag.
	---------------------------------------------------------------------
	else
		ty = Main.LF[st.s][ot];
		if not ty or string.sub(ot, 1, 1) == "_" then
			ld.error = string.format("Invalid tag on line %i.", ld.l);
		end
	end
	----------------------------------------------------------------------
	-- Push a new section identified by the type to which the tag refers.
	----------------------------------------------------------------------
	if not ld.error then
		table.insert(ld.s, { cd = {}, s = ty, t = ot });
	end
	return type(ld.error) == "nil";
end

---------------------------
-- ProcessCloseTag
-- Processes a closing tag
-- ct: Close tag
-- ld: Loading data
---------------------------
function ProcessCloseTag (ct, ld)
	------------------------------------------------------------------------
	-- Make sure the close tag matches the section string at the stack top.
	------------------------------------------------------------------------
	local st = ld.s[ld.s.n];
	if ct == st.t then
		---------------------------------------------
		-- Make sure all required fields are loaded.
		---------------------------------------------
		if Main.LF[st.s]._R then
			for i, v in pairs(Main.LF[st.s]._R) do
				if st.cd[v] == nil then
					ld.error = string.format("%s field required in %s ending on line %i", v, st.s, ld.l);
					return false;
				end
			end
		end
		-------------------------------------------------
		-- Close off the section and put it in the data.
		-------------------------------------------------
		PopTopValue(ld);
	else
		ld.error = string.format("Expected /%s tag on line %i.", st.t, ld.l);
	end
	return type(ld.error) == "nil";
end

-------------------------------------------
-- ProcessValue
-- Processes a tagged data value
-- t: Value tag
-- v: Value to process
-- ld: Loading data
-- Returns: True if reading should continue
--------------------------------------------
function ProcessValue (t, v, ld)
	----------------------------------------------------------------------------------
	-- Get the top of the section stack. Check whether the value is already loaded or
	-- whether we are trying to load an unexpected value into a list.
	----------------------------------------------------------------------------------
	local st = ld.s[ld.s.n];
	if st.cd[t] then
		ld.error = string.format("%s field on line %i already loaded.", t, ld.l);
	elseif st.n and st.t ~= t then
		ld.error = string.format("Expected %s on line %i.", st.t, ld.l);
	else
		----------------------------------------------
		-- Make sure we are processing a valid value.
		----------------------------------------------
		local ty = Main.LF[st.s][t];
		if not ty or string.sub(ty, 1, 1) == "_" then
			ld.error = string.format("Invalid %s tag on line %i.", t, ld.l);
		--------------------------------------------------------
		-- If presented with primitive-typed value, load these.
		--------------------------------------------------------
		elseif ty == "S" then
			local s = string.gsub(v, "^\"(.*)\"$", "%1_");
			if s ~= v then
				AddValue(ld, t, string.gsub(s, "(.*)_$", "%1"));
			else
				ld.error = string.format("Invalid string on line %i.", ld.l);
			end
		elseif ty == "I" then
			local i = string.gsub(v, "^(%d+)$", "%1");
			if i == v then
				AddValue(ld, t, tonumber(i));
			else
				ld.error = string.format("Invalid int on line %i.", ld.l);
			end
		elseif ty == "F" then
			local f = tonumber(v);
			if f then
				AddValue(ld, t, f)
			else
				ld.error = string.format("Invalid float on line %i.", ld.l);
			end
		elseif ty == "B" then
			if v == "true" then
				AddValue(ld, t, true);
			elseif v == "false" then
				AddValue(ld, t, false);
			else
				ld.error = string.format("Invalid boolean on line %i.", ld.l);
			end
		--------------------------------------------------------------------------------
		-- If given a list, load the list count and prepare for the list items. We take
		-- special consideration for items to be loaded into the list as raw values, as
		-- opposed to subsections.
		--------------------------------------------------------------------------------
		elseif ty == "L" then
			local c = string.gsub(v, "^(%d+)$", "%1");
			if c == v then
				st.cd[t] = tonumber(c);
				if st.cd[t] ~= 0 then
					local lt, ls = Main.LF[st.s]._L[t];
					if string.sub(lt, 1, 1) == ">" then
						lt, ls = string.gsub(lt, "^>(.*)", "%1"), st.s;
					end
					table.insert(ld.s, { cd = { n = 0 }, s = ls, n = st.cd[t], t = lt });
				end
			else
				ld.error = string.format("Invalid count on line %i.", ld.l);
			end
		end
	end
	return type(ld.error) == "nil";
end

------------------------------------------------------------------
-- PopTopValue
-- Pops the top value in the stack and adds it to the lower entry
-- ld: Loading data
------------------------------------------------------------------
function PopTopValue (ld)
	local st = ld.s[ld.s.n];
	table.remove(ld.s);
	AddValue(ld, st.t, st.cd);
end

---------------------------------------------
-- AddValue
-- Adds a value into the appropriate section
-- ld: Loading data
-- t: Value tag
-- v: Value to be added
---------------------------------------------
function AddValue (ld, t, v)
	----------------------------------------------------------------------------------
	-- If the top section is a list, put the value into it and decrement the count of
	-- items. Otherwise, insert it into the top section, using the tag as a key.
	----------------------------------------------------------------------------------
	local st = ld.s[ld.s.n];
	if st.n then
		table.insert(st.cd, v);
		DecrementLoopCounter(ld);	
	else
		st.cd[t] = v;
	end
end

----------------------------------------------------
-- DecrementLoopCounter
-- Handles loop management and associated unrolling
-- ld: Loading data
----------------------------------------------------
function DecrementLoopCounter (ld)
	------------------------------------
	-- Decrement the stack top counter.
	------------------------------------
	local st = ld.s[ld.s.n];
	st.n = st.n - 1;
	---------------------------------------------
	-- If the list is ended, put it in the data.
	---------------------------------------------
	if st.n == 0 then
		PopTopValue(ld);
	end
end

---------------------------------------------------------
-- ReadScene
-- Reads and processes the next line from the scene file
-- f: File handle
-- ld: Loading data
-- Returns: True if reading should continue
---------------------------------------------------------
function ReadScene (f, ld)
	-----------------------------------------------------------------
	-- Grab a line off the file. Quit if the end of file is reached.
	-----------------------------------------------------------------
	local nl = GetNextLine(f, ld);
	if ld.l then
		--------------------------------------
		-- Try to extract tags from the line.
		--------------------------------------
		local ot = string.gsub(nl, "^<(%w+)>.*", "%1");
		local ct = string.gsub(nl, ".*</(%w+)>$", "%1");
		------------------------------------------------------------------------------
		-- If we have an open or close tag is found, process the tag. Otherwise, read 
		-- and process a value from the string, ensuring the open/close tags match.
		------------------------------------------------------------------------------
		if ot == ct then
			local vt = string.gsub(nl, "^<%w+>(.+)</%w+>$", "%1");
			return ProcessValue(ot, vt, ld);
		elseif ot ~= nl then
			return ProcessOpenTag(ot, ld);
		elseif ct ~= nl then
			return ProcessCloseTag(ct, ld);
		else
			ld.error = string.format("Invalid syntax on line %i.", ld.l);
		end
	end
	return false;
end